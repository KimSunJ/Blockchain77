.grid {
  display: grid;
  /* 
  grid 박스를 만든다. 부모역할
  '영역을 자로 나눈다' 라는 개념
   */
  /* grid-template-rows: 200px 200px; */
  /* 
    grid 박스의 세로 높이를 결정한다.
    row(행)의 수만큼 입력한다.
    */
  /* grid-template-columns: 100px 100px 100px; */
  /* 
    grid 박스의 가로 너비를 결정한다.
    column(열)의 수만큼 입력한다.
    */
  /* grid-template-rows: repeat(2, 200px); */
  /* grid-template-columns: repeat(3, 100px); */
  /* 
repeat 함수는 입력을 반복해준다.
repeat(개수, 크기)
'inline'개념과 다름
 */
  grid-template-rows: 50px 200px 100px;
  grid-template-columns: repeat(5, minmax(100px, 300px));
  /* minmax 함수는 이름 그대로 최소 최대 결정, 그 사이에서 알아서 조절 */
  /* 화면 채우려면 item 개수만큼 지정해주면 됨 (column에서) */
  /* 
  너비가 줄어든다고 해서 넘어가지 않는다 (flex-wrap 과의 차이점)
  * flex-wrap은 아이템의 사이즈를 줄이지 않고 다음 줄로 넘어가겠다는 뜻
  무조건 개수로 따져서 repeat의 개수보다 item 개수가 많으면 다음 줄로 넘어간다.
  * grid 에서 repeat는 아이템의 사이즈가 줄어든다.
   */

  row-gap: 10px;
  /* 세로 간격 (틈) */
  column-gap: 20px;
  /* 가로 간격 (틈) */

  /* grid-auto-flow: column; */
  /* grid의 아이템의 진행 방향을 설정한다.(순서를 가로 or 세로로 진행하겠다.) */
  grid-template-areas:
    "sidebar header header header header"
    "sidebar content content content content"
    /* 아래와 다르게 가면 다른 값이 나온다 */
    /* "sidebar content content content ." */
    /* "footer footer footer footer footer"; */
    "sidebar footer footer footer footer";
  /* 
    grid-template-areas 는 grid 박스를 설정한다.
    하나의 row(column 설정)는 ""로 설정하고, 
    여러 row일 경우 줄바꿈으로 처리함다.
    .을 설정할 경우 빈칸이 된다.
    무조건!! 사각형이여야 한다.
    item의 스타일에 grid-area와 매칭한다.
    */
  /* align-items: stretch;
  align-items: start;
  align-items: center;
  align-items: end; */
  /* 세로 기준으로 위치를 결정함 */

  /* justify-items: stretch;
  justify-items: start;
  justify-items: center;
  justify-items: end; */
  /* 가로 기준으로 위치를 결정함 */

  /* 기본값이 stretch */
}
/* 
grid-template-areas는
grid-template-rows (column)와 함께 사용하면 안된다. */

.grid-item {
  background-color: #ffff00;
  border: 1px solid black;
  /* 내용 삭제할 경우 최소 높이가 출력된다. */
}
/* 
자신의 크기를 정할 떄는 width, height
영역의 크기를 정할 때는 justify
형태의 크기를 정할 때는 row, column
 */

.sidebar {
  grid-area: sidebar;
  /* grid-area는 부모 grid 박스의 
  grid-template-areas와 매칭한다. */
  background-color: antiquewhite;
  /* display: flex;
  flex-direction: column;
  justify-content: space-around; */
}
.header {
  grid-area: header;
  background-color: aquamarine;
}
.content {
  grid-area: content;
  background-color: burlywood;
}
.footer {
  grid-area: footer;
  background-color: greenyellow;
}

.sidebar > div {
  height: 20px;
  color: red;
  margin-bottom: 10px;
  padding: 5px;
}

.sidebar > div:last-child {
  margin-bottom: 0;
}

.mosaic {
  display: grid;
  /* grid 박스 설정 */

  /* 기본적으로 보여질 형식 설정 */
  grid-template-columns: repeat(2, 100px);
  grid-template-rows: repeat(2, 100px);
  /* 100px 의 정사각형을 4개를 2줄로 출력 */
}

.mosaic > div {
  /* grid 박스의 아이템을 눈에 보여주기 위해서 설정 */
  background-color: antiquewhite;
  border: 1px solid black;
}

.mosaic-item {
  display: none;
  /* 기본적으로 보여지면 안될 아이템을 display: none
  사용해 보이지 않도록 설정
  */
}

/* 
마우스 오버를 감지하기 위해 (마우스가 해당 영역 위에 있는지 확인하기 위해)
hover 가상 클래스 (의사 클래스)를 사용한다.
*/
.mosaic:hover {
  /* mosaic 클래스 위에 마우스가 올라가 있으면 해당 스타일을 적용한다. */
  /* grid-template-columns: repeat(4, 50px); */
  /* grid-template-rows: repeat(4, 50px); */
  /* 50px의 정사각형을 16개를 4줄로 출력 */
  /* 개수가 columns와 rows가 다르면 출력 안된다. */
  grid-template-columns: repeat(3, 66px);
  grid-template-rows: repeat(3, 66px);
}

.mosaic:hover .mosaic-item {
  /* mosaic 클래스 위에 마우스가 있을 때 자식 중 
  mosaic-item 클래스를 가진 영역에 스타일을 적용한다.
  */
  display: block;
  /* display: block 사용해 눈에 보이도록 설정한다. */
}
