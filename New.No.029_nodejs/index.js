console.log("테스트중");

// 서버는 외부에서 접속하는 컴퓨터
// port : 일종의 문이다.
// HTTP : 80 포트를 사용
// HTTPS : 443 포트를 사용
// SSH : 22 포트를 사용
// FTP : 21 포트를 사용
// DB(maria) : 3306 포트를 사용
// 서버는 보통 3가지로 나뉜다.(종류가 아니라 구분)
// Web Server, Application Server DataBase Server
// Web Server는 HTML 파일 주는 서버 (Front End)
// Application Server는 데이터를 주는 서버 (Back End)
// DataBase Server는 데이터를 저장하는 서버(DB)
// WAS : Web Application Server => Web Server + Application Server, 즉 혼자서 HTML파일도 주고, 데이터도 주고 하는 서버

// Node.js
// Javascript를 브라우저 환경이 아닌 OS 환경에서 실행하기 위한 런타임 환경
// 기본적으로 싱글 스레드다. / 이벤트 기반 / 논 블로킹 I/O
// 이벤트 기반 : 이벤트 루프가 있어 정의된 이벤트에 대해서 코드를 실행한다.
// 싱글 스레드 : 싱글 스레드라서, 한번에 여러 작업을 실행하지 못한다.
//  프로세스(Process) & 스레드(Thread)
//     - 프로세스 : 프로그램 단위 << 우리가 실행한 프로그램에 대한 것
//     - 스레드 : CPU의 작업 단위 << 프로세스가 실행하기 위해서 CPU에게 할당받는 영역
//     프로세스가 실행되면 스레드를 받아 실행이 완료되면 스레드를 CPU에게 반환한다.
// 크롬에서 탭을 나누면 스레드는 그만큼 최소 하나씩 가져간다.(여러개를 켜두면 버벅이는 이유: 스레드가 그만큼 필요해지기 때문)
// 순수하게 Javascript로 따졌을 때 '싱글 스레드'라는 것.
// Javascript는 기본적으로 싱글 스레드이며 다만, 멀티 스레드 기능을 사용할 수 있게 해주는 라이브러리가 있다.

// 논 블로킹 I/O
//   I/O => In Out
// 논 블로킹? => 동기/비동기, 블로킹/논블로킹
// 동기 : 실행되는 작업이 서로 연관성을 가진다.
// => 하나가 실행이 완료된 후에 그 반환값을 사용해 다른 작업을 실행한다. / 이전 작업을 기다려야 한다.
const a = 1;
const b = 2;
function add(a, b) {
  return a + b;
}
console.log(add(a, b));
// console 객체의 log 메서드를 실행하기 위해 add 함수를 실행한다.
// add가 끝나야 console.log 메서드를 실행한다.
// 위에서 실행한 것이 밑에서 같이 실행되는 것을 '동기'라고 한다.
// << 전형적인 동기 방식
// 비동기: 작업을 실행하는데 별 관계가 없다.=> 함께 실행될 수 있다.
//  ex_이벤트 함수들
setTimeout(() => {
  console.log(b);
}, 1000);
console.log(a);

// 블로킹 / 논 블로킹
// 블로킹 : 동기 작업은 이전 작업을 기다려야 한다. => 이전 작업이 끝날 때까지 멈춰야 한다. / 멈추도록 하는 것을 블로킹이라고 한다.
// 논 블로킹 : 이전 작업과 무관하게 작업이 진행된다, 즉, 멈추지 않는다.

// 블로킹과 동기 방식으로 계속 코드를 사용해왔다.
// 싱글 스레드는 하나의 작업만을 진행하는데 어떻게 논 블로킹이 성립되는가?
// 여러가지 작업을 어떻게 한꺼번에 할 수 있는가?
//  답은 시분할(라운드 로빈) 방법
//  시분할이란? 시(간)분할, 코드를 일정 시간으로 잘라서 실행한다.
//  여러 작업을 할 때 각 코드에 대해서 일정한 시간 동안 진행 후 다른 코드를 진행한다. 한번 다 돌린 후 다시 이어서 진행한다.
//  여러 번의 작업이 한번에 돌아가는 것처럼 보여짐. 끊어서 작업,
//  ex_ 한사람이 여러명의 주문을 받고 처리한다. -> 논 블로킹 작업 방식

// REST API Server, Socket Server
// REST API Server : 클라이언트가 요청을 해야지만 서버를 줄 수 있다.(요청을 해야만 응답을 보낸다.)
// Socket Server : 양쪽으로 서버를 주고 받을 수 있다.(요청을 안해도 응답을 보낸다.)- 블록체인할 경우 많이 사용 / 체인을 계속 연결되어야하기 때문에 서버와 서버 간의 연결 (양쪽에서 서로 서버를 보내는 구조)
