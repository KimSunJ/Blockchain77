const express = require("express");
const session = require("express-session");
const morgan = require("morgan");
const dotenv = require("dotenv");
const path = require("path");
const cookieParser = require("cookie-parser");

dotenv.config();

const app = express();

app.set ("port", process.env.PORT || 8080);

미들웨어 함수
    app.use ((res, req, next)=>{
    if(process.env.NODE.ENV === "production") morgan("combined")(req, res, next);
    else morgan(req, res, next);
    });

정적(static)파일 경로 설정
    app.use("/", express.static(path.join(__dirname, "web")));

미들웨어
    app.use(express.json());
    app.use(express.urlencoded({extended: false}));

express에서 쿠키 사용
    app.use(cookieParser(process.env.COOKIE_SECRET));


    app.use(
        session({
            resave: fase,
            saveUninitialized: false,
            secret: process.env.COOKIE_SECRET,
            cookie: {
                httpOnly: true,
                secure: false,
            },
            name: "session-cookie",
        })
    );

app.listen(app.get("port"),()=>{
    console.log("server open");
});

const express = require ("express");
const session = require ("express-session");
const dotenv = require ("dotenv");
const morgan = require ("morgan");
const path = require ("path");
const cookieParser = require ("cookie-parser");

dotenv.config();

const app = express();
app.set("port", express.env.PORT || 8080);
app.use((req, res, next)=>{
    if(process.env.NODE_ENV === "production") morgan("combined")(req, res, next);
    else morgan("dev")(req, res, next);
});

app.use("/", express.static(path.join(__dirname, "web")));
app.use(express.json());
app.use(express.urlencoded({ extended:false }));
app.use(cookieParser(process.env.COOKIE_SECRET));
app.use(
    session({
        resave: false,
        saveUninitialized: false,
        secret : process.env.COOKIE_SECRET,
        cookie : {
            httpOnly: true,
            secure: false,
        },
        name: "session-cookie",
    })
);

app.listen(app.get("port"),()=>{
    console.log()
})
